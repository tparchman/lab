### SNP calling
##### Generating the reference with dDocent:


```{r eval=FALSE}
dDocent:

conda activate ddocent_env

1. Create a new folder called RefOpt, with a subset of individuals of your total data set (less than 5)

./ReferenceOpt.sh 4 10 4 10 SE 5 0.95 0.99 0.005

2. Visualize data in kopt.data: plot values for each k1,k2 combination across similarity thresholds, pick a similarity threshold at the point of inflection on the curve 
.
****
library(ggplot2)
data.table <- read.table("kopt.data", header = FALSE, col.names= c("k1","k2","Similarity", "Contigs"))
data.table$K1K2 <- paste(data.table$k1, data.table$k2, sep=",")
df=data.frame(data.table)
df$K1K2 <- as.factor(df$K1K2)
p <- ggplot(df, aes(x=Similarity, y=Contigs, group=K1K2)) + scale_x_continuous(breaks=seq(0.8,0.98,0.01)) + geom_line(aes(colour = K1K2))
p
ggsave("kvalues.pdf",p,height=8,width = 10,units = 'in')
*****
---0.975, k 7 k 6---

3. Trimming the reads 

4. Run RefMapOpt.sh using the similarity threshold picked from last step 

./RefMapOpt.sh 6 7 6 7 0.975 SE 20 

5. Copy the reference to the main directory 

6. Trimming all the reads

7. Run dDocent on your full data set for reference mapping  97.5 7 6 
./RefMapOpt.sh 6 7 6 7 0.975 SE 20 
```

##### Calling SNPs with bcftools:

```{r eval=FALSE}
./bwa_sort.sh

*****
#!/bin/sh
INDS=($(for i in /working/mascaro/chdo/final/main/*.F.fq.gz; do echo $(basename ${i%.F.fq.gz*}); done))
for IND in ${INDS[@]};
do
	# declare variables
	REF=/working/mascaro/chdo/final/main/reference.fasta
	FORWARD=/working/mascaro/chdo/final/main/${IND}.F.fq.gz
	OUTPUT=/working/mascaro/chdo/final/main/${IND}_sort.bam
	# then align and sort
	echo "Aligning $IND with bwa"
	bwa mem -M -t 10 $REF $FORWARD \
	 | samtools view -b | \
	samtools sort -T ${IND} > $OUTPUT
done
*****

./bcftools.sh ****

*****
#!/bin/sh
REF=/working/mascaro/chdo/final/main/reference.fasta
bcftools mpileup -a AD,DP,SP -Ou -f reference.fasta ./*_sort.bam | bcftools call -f GQ,GP -mO z -o ./chdo.vcf.gz
done
```

##### Filtering:


```{r eval=FALSE}
1. Keep only Biallelic:

vcftools --remove-indels --min-alleles 2 --max-alleles 2 --remove-filtered-all  --recode --recode-INFO-all --gzvcf chdo.vcf.gz --out chdo_biallelic

#### After filtering, kept 276 out of 276 Individuals
#### Outputting VCF file...
#### After filtering, kept 665153 out of a possible 3082476 Sites

***
2. Remove by MAF, missing, and Thin:

vcftools --max-missing 0.6 --maf 0.02 --thin 100 --remove-filtered-all --recode --recode-INFO-all --gzvcf chdo_biallelic.recode.vcf --out chdo_miss60_thin100_maf2
###After filtering, kept 276 out of 276 Individuals
###Outputting VCF file...
###After filtering, kept 28471 out of a possible 665153 Sites
vcftools --max-missing 0.7 --maf 0.02 --thin 100 --remove-filtered-all --recode --recode-INFO-all --gzvcf chdo_biallelic.recode.vcf --out chdo_miss70_thin100_maf2
### After filtering, kept 276 out of 276 Individuals
### Outputting VCF file...
###After filtering, kept 26457 out of a possible 665153 Sites
vcftools --max-missing 0.7 --maf 0.03 --thin 100 --remove-filtered-all --recode --recode-INFO-all --gzvcf chdo_biallelic.recode.vcf --out chdo_miss70_thin100_maf3
###After filtering, kept 276 out of 276 Individuals
###Outputting VCF file...
###After filtering, kept 25628 out of a possible 665153 Sites
vcftools --max-missing 0.8 --maf 0.03 --thin 100 --remove-filtered-all --recode --recode-INFO-all --gzvcf chdo_biallelic.recode.vcf --out chdo_miss80_thin100_maf3
###After filtering, kept 276 out of 276 Individuals
###Outputting VCF file...
###After filtering, kept 22788 out of a possible 665153 Sites
vcftools --max-missing 0.8 --maf 0.04 --thin 100 --remove-filtered-all --recode --recode-INFO-all --gzvcf chdo_biallelic.recode.vcf --out chdo_miss80_thin100_maf3
###After filtering, kept 276 out of 276 Individuals
###Outputting VCF file...
###After filtering, kept 22037 out of a possible 665153 Sites

3. Calculate missing data using vcfR:

### Missing data
require(readr)
library(data.table)
require(MASS)
require(ggplot2)
library(vcfR)

vcf <- read.vcfR("chdo_final.vcf", verbose = FALSE)

#get positions
chrom <- getCHROM(vcf)
pos <- getPOS(vcf)
pos_ID <- paste(chrom,pos,sep = ':')

#get pl 
dp <- extract.gt(vcf, element = 'DP')

## check out PL and pos_ID
print(length(pos_ID))
print(pos_ID[1:10])
dp[1:5,1:5]
str(dp[1:5,1:5])

#Calculate missing loci and individual
nloci <- ncol(dp)
nindv <- nrow(dp)
print(nloci)
print(nindv)

miss_loci <- apply(dp,1, function(d) length(which(d == "0"))/nloci)
print(summary(miss_loci))
#Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
#0.000000 0.003623 0.028986 0.055332 0.097826 0.199275 

print(length(which(miss_loci <= .10))) #16647
print(length(which(miss_loci <= .20))) #22037
print(length(which(miss_loci <= .30))) #22037
print(length(which(miss_loci <= .40))) #22037
print(length(which(miss_loci <= .50))) #22037

#keep_miss <- pos_ID[which(miss_loci <= .20)]
#length(keep_miss)
#
#keep_miss20_df <- data.frame(chrom=sapply(keep_miss,function(s) unlist(strsplit(as.character(s),':'))[1]),
#                             pos=sapply(keep_miss,function(s) unlist(strsplit(as.character(s),':'))[2]))
#print(head(keep_miss20_df))    
#write.table(keep_miss20_df,'keep_miss20.txt',quote=F,row.names=F,col.names=F,sep='\t')
#vcftools --vcf chdo_final.vcf --remove-filtered-all --recode --recode-INFO-all --positions "keep_miss20.txt" --out chdo_final.vcf

4. Remove bad_indv with mean depth lower than 5

#CD_SA_5
#CD_SO_1

vcftools --gzvcf  chdo_ultimo.vcf.recode.vcf --remove-indels  --remove-filtered-all --recode --recode-INFO-all --remove bad_indvi.txt --out chdo_very_last
#After filtering, kept 274 out of 276 Individuals
#Outputting VCF file...
#After filtering, kept 22037 out of a possible 22037 Sites

mv chdo_very_last.recode.vcf chdo_ULTIMO.vcf


5. vcf statistics:
  
vcftools --gzvcf chdo_ULTIMO.vcf --site-quality --out quality
vcftools --gzvcf chdo_ULTIMO.vcf --freq2 --out  --max-alleles 2
vcftools --gzvcf chdo_ULTIMO.vcf --depth --out meandepthind
vcftools --gzvcf chdo_ULTIMO.vcf --site-mean-depth --out meandepsite
vcftools --gzvcf chdo_ULTIMO.vcf --missing-indv --out missing
vcftools --gzvcf chdo_ULTIMO.vcf --missing-site --out missingsite
vcftools --gzvcf chdo_ULTIMO.vcf --het --out het
vcftools --gzvcf chdo_ULTIMO.vcf --counts --out count


6. Recalculate missing data:

vcf <- read.vcfR("chdo_ULTIMO.vcf", verbose = FALSE)

#get positions
chrom <- getCHROM(vcf)
pos <- getPOS(vcf)
pos_ID <- paste(chrom,pos,sep = ':')

dp <- extract.gt(vcf, element = 'DP')

print(length(pos_ID))
print(pos_ID[1:10])
dp[1:5,1:5]

ID <- colnames(dp)
ssp_ploid <- as.character(sapply(ID,function(s) unlist(strsplit(as.character(s),'_'))[1]))
ploidy <- sapply(ssp_ploid,function(s) gsub('(\\D)','',s,perl=TRUE))
print(length(ID))
print(ID[1:10])
print(ploidy[1:10])
print(unique(ploidy))

## Calculate missing loci and individual

print(dim(dp))
nindv <- ncol(dp)
nloci <- nrow(dp)
print(nloci)
print(nindv)

miss_loci <- apply(dp,1, function(d) length(which(d == "0"))/nindv)
#miss_loci <- apply(dp[,1:100],1, function(d) (length(which(d == "0"))/100))
print(length(miss_loci))
print(summary(miss_loci))

# Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
#0.00000 0.00000 0.02555 0.05231 0.09489 0.20073 

###calculaate missing within each ploidy

#subset dp
dp2 <- dp[,which(ploidy=='2')]
dp4 <- dp[,which(ploidy=='4')]
dp6 <- dp[,which(ploidy=='6')]


#calc miss
miss_loci_2 <- apply(dp2,1, function(d) length(which(d == "0"))/ncol(dp2))
print(summary(miss_loci_2))
#Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
#0.00000 0.00000 0.04902 0.08530 0.14706 0.47059 

miss_loci_4 <- apply(dp4,1, function(d) length(which(d == "0"))/ncol(dp4))
print(summary(miss_loci_4))
#Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
#0.000000 0.000000 0.007042 0.034429 0.056338 0.28873

miss_loci_6 <- apply(dp6,1, function(d) length(which(d == "0"))/ncol(dp6))
print(summary(miss_loci_6))
# Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
#0.00000 0.00000 0.00000 0.02477 0.03333 0.5333 


miss_index_2 <- which(miss_loci_2 >= 0.95)
miss_index_4 <- which(miss_loci_4 >= 0.95)
miss_index_6 <- which(miss_loci_6 >= 0.95)

miss_index <- c(miss_index_2,miss_index_4,miss_index_6)
print(miss_index)

keep_missP <- pos_ID[-miss_index]
print(length(pos_ID))
print(length(miss_index))
print(length(keep_missP))


keep_missP_df <- data.frame(chrom=sapply(keep_missP,function(s) unlist(strsplit(as.character(s),':'))[1]),
                            pos=sapply(keep_missP,function(s) unlist(strsplit(as.character(s),':'))[2]))
print(head(keep_missP_df))    
# data frame with 0 columns and 0 rows

## Missing Inv
nloci <- nrow(dp)
#print(nloci)

miss_indv <- apply(dp,2, function(d) length(which(d == "0"))/nloci)
print(length(miss_indv))
print(summary(miss_indv))

#  Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
#0.003176 0.017947 0.039683 0.052309 0.078584 0.204701 

for (perc in seq(.1,.9,by=.1)){
  print(paste0('number of individuals with greater than ',perc*100,'% missing data.....  ',
               length(which(miss_indv >= perc))))
}

#[1] "number of individuals with greater than 10% missing data.....  33"
#[1] "number of individuals with greater than 20% missing data.....  1"
#[1] "number of individuals with greater than 30% missing data.....  0"
#[1] "number of individuals with greater than 40% missing data.....  0"
#[1] "number of individuals with greater than 50% missing data.....  0"
#[1] "number of individuals with greater than 60% missing data.....  0"
#[1] "number of individuals with greater than 70% missing data.....  0"
#[1] "number of individuals with greater than 80% missing data.....  0"
#[1] "number of individuals with greater than 90% missing data.....  0"

vcftools --vcf chdo_ULTIMO.vcf --012
vcftools --vcf chdo_ULTIMO.vcf --depth --out depth_ultima


After filtering, kept 268 Individuals, 18685 Sites, 27.49 X

vcftools --gzvcf chdo_ULTIMO.vcf --site-quality --out quality
vcftools --gzvcf chdo_ULTIMO.vcf --freq2 --out  --max-alleles 2
vcftools --gzvcf chdo_ULTIMO.vcf --depth --out meandepthind
vcftools --gzvcf chdo_ULTIMO.vcf --site-mean-depth --out meandepsite
vcftools --gzvcf chdo_ULTIMO.vcf --missing-indv --out missing
vcftools --gzvcf chdo_ULTIMO.vcf --missing-site --out missingsite
vcftools --gzvcf chdo_ULTIMO.vcf --het --out het
vcftools --gzvcf chdo_ULTIMO.vcf --counts --out count
```
